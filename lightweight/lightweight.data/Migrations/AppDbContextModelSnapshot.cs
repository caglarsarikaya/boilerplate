// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lightweight.data.Context;

namespace lightweight.data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("lightweight.data.Model.Duty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<DateTime>("DueDate");

                    b.Property<int?>("DutyStatusesId");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("StatusId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DutyStatusesId");

                    b.HasIndex("UserId");

                    b.ToTable("Duties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "kullanıcı rolleri olacak,görev atanacak",
                            DueDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Header = "TO DO List",
                            StartDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 0,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("lightweight.data.Model.DutyStatuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Statue")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("DutyStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Statue = "Plan"
                        },
                        new
                        {
                            Id = 2,
                            Statue = "To Do"
                        },
                        new
                        {
                            Id = 3,
                            Statue = "In Progress"
                        },
                        new
                        {
                            Id = 4,
                            Statue = "Done"
                        },
                        new
                        {
                            Id = 5,
                            Statue = "Bug Report"
                        });
                });

            modelBuilder.Entity("lightweight.data.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("User");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin",
                            FullName = "admin full name",
                            Password = "osKBwUxnbbrl/MSTYOAq8w==",
                            Role = "Admin",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            Email = "user",
                            FullName = "user full name",
                            Password = "osKBwUxnbbrl/MSTYOAq8w==",
                            Role = "User",
                            Status = true
                        });
                });

            modelBuilder.Entity("lightweight.data.Model.Duty", b =>
                {
                    b.HasOne("lightweight.data.Model.DutyStatuses", "DutyStatuses")
                        .WithMany("Duty")
                        .HasForeignKey("DutyStatusesId");

                    b.HasOne("lightweight.data.Model.User", "User")
                        .WithMany("Duty")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
